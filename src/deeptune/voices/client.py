# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from .. import core
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..types.create_voice_response import CreateVoiceResponse
from ..types.get_voice_by_id_response import GetVoiceByIdResponse
from ..types.list_voices_response import ListVoicesResponse
from ..types.update_voice_response import UpdateVoiceResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class VoicesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> ListVoicesResponse:
        """
        Retrieve all voices associated with the current workspace.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListVoicesResponse
            Successful response

        Examples
        --------
        from deeptune.client import Deeptune

        client = Deeptune(
            api_key="YOUR_API_KEY",
        )
        client.voices.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/voices", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(ListVoicesResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        name: str,
        file: core.File,
        description: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateVoiceResponse:
        """
        Create a new voice with a name, optional description, and audio file.

        Parameters
        ----------
        name : str
            The name of the new voice.

        file : core.File
            See core.File for more documentation

        description : typing.Optional[str]
            Optional description of the voice.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateVoiceResponse
            Successful response

        Examples
        --------
        from deeptune.client import Deeptune

        client = Deeptune(
            api_key="YOUR_API_KEY",
        )
        client.voices.create(
            name="name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/voices",
            method="POST",
            data={"name": name, "description": description},
            files={"file": file},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(CreateVoiceResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, voice_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetVoiceByIdResponse:
        """
        Retrieve a specific voice by its ID.

        Parameters
        ----------
        voice_id : str
            The ID of the voice to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetVoiceByIdResponse
            Successful response

        Examples
        --------
        from deeptune.client import Deeptune

        client = Deeptune(
            api_key="YOUR_API_KEY",
        )
        client.voices.get(
            voice_id="voice_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/voices/{jsonable_encoder(voice_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(GetVoiceByIdResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        voice_id: str,
        *,
        name: typing.Optional[str] = None,
        file: typing.Optional[core.File] = None,
        description: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateVoiceResponse:
        """
        Update an existing voice with new name, description, or audio file.

        Parameters
        ----------
        voice_id : str
            The ID of the voice to update

        name : typing.Optional[str]
            The name of the new voice.

        file : typing.Optional[core.File]
            See core.File for more documentation

        description : typing.Optional[str]
            Optional description of the voice.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateVoiceResponse
            Successful response

        Examples
        --------
        from deeptune.client import Deeptune

        client = Deeptune(
            api_key="YOUR_API_KEY",
        )
        client.voices.update(
            voice_id="voice_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/voices/{jsonable_encoder(voice_id)}",
            method="PUT",
            data={"name": name, "description": description},
            files={"file": file},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(UpdateVoiceResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, voice_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete an existing voice by its ID.

        Parameters
        ----------
        voice_id : str
            The ID of the voice to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from deeptune.client import Deeptune

        client = Deeptune(
            api_key="YOUR_API_KEY",
        )
        client.voices.delete(
            voice_id="voice_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/voices/{jsonable_encoder(voice_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncVoicesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> ListVoicesResponse:
        """
        Retrieve all voices associated with the current workspace.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListVoicesResponse
            Successful response

        Examples
        --------
        from deeptune.client import AsyncDeeptune

        client = AsyncDeeptune(
            api_key="YOUR_API_KEY",
        )
        await client.voices.list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/voices", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(ListVoicesResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        name: str,
        file: core.File,
        description: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateVoiceResponse:
        """
        Create a new voice with a name, optional description, and audio file.

        Parameters
        ----------
        name : str
            The name of the new voice.

        file : core.File
            See core.File for more documentation

        description : typing.Optional[str]
            Optional description of the voice.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateVoiceResponse
            Successful response

        Examples
        --------
        from deeptune.client import AsyncDeeptune

        client = AsyncDeeptune(
            api_key="YOUR_API_KEY",
        )
        await client.voices.create(
            name="name",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/voices",
            method="POST",
            data={"name": name, "description": description},
            files={"file": file},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(CreateVoiceResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, voice_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetVoiceByIdResponse:
        """
        Retrieve a specific voice by its ID.

        Parameters
        ----------
        voice_id : str
            The ID of the voice to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetVoiceByIdResponse
            Successful response

        Examples
        --------
        from deeptune.client import AsyncDeeptune

        client = AsyncDeeptune(
            api_key="YOUR_API_KEY",
        )
        await client.voices.get(
            voice_id="voice_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/voices/{jsonable_encoder(voice_id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(GetVoiceByIdResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        voice_id: str,
        *,
        name: typing.Optional[str] = None,
        file: typing.Optional[core.File] = None,
        description: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateVoiceResponse:
        """
        Update an existing voice with new name, description, or audio file.

        Parameters
        ----------
        voice_id : str
            The ID of the voice to update

        name : typing.Optional[str]
            The name of the new voice.

        file : typing.Optional[core.File]
            See core.File for more documentation

        description : typing.Optional[str]
            Optional description of the voice.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateVoiceResponse
            Successful response

        Examples
        --------
        from deeptune.client import AsyncDeeptune

        client = AsyncDeeptune(
            api_key="YOUR_API_KEY",
        )
        await client.voices.update(
            voice_id="voice_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/voices/{jsonable_encoder(voice_id)}",
            method="PUT",
            data={"name": name, "description": description},
            files={"file": file},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(UpdateVoiceResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, voice_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete an existing voice by its ID.

        Parameters
        ----------
        voice_id : str
            The ID of the voice to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from deeptune.client import AsyncDeeptune

        client = AsyncDeeptune(
            api_key="YOUR_API_KEY",
        )
        await client.voices.delete(
            voice_id="voice_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/voices/{jsonable_encoder(voice_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
